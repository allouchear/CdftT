#include<iostream>
#include<iomanip>
#include <Orbitals/Orbitals.h>
#include <Utils/LM.h>

using namespace std;


void Orbitals::Save(string& tag)
{
	if(tag.find(".wfx")!=string::npos)
		Save_wfx(tag);
	else if(tag.find(".molden")!=string::npos)
		Save_molden(tag);
	else if(tag.find(".gab")!=string::npos)
		Save_gab(tag);
	else
	{
		cout<<"Format not recognize, please choose a valide format"<<endl;
		exit(1);
	}
}

void Orbitals::Save_wfx(string& tag)
{
	ofstream s;
	s.open(tag);

	s<<"<Title>"<<endl;
	s<<" Input file generated by cdftt..."<<endl;
	s<<"</Title>"<<endl;
	s<<"<Keywords>"<<endl;
	s<<" GTO"<<endl;
	s<<"</Keywords>"<<endl;

	s<<"<Number of Nuclei>"<<endl;
	s<<" "<<_number_of_atoms<<endl;
	s<<"</Number of Nuclei>"<<endl;

	s<<"<Number of Occupied Molecular Orbitals>"<<endl;
	s<<" "<<_numberOfMo<<endl;
	s<<"</Number of Occupied Molecular Orbitals>"<<endl;

	s<<"<Number of Perturbations>"<<endl;
	s<<" 0"<<endl;
	s<<"</Number of Perturbations>"<<endl;

	s<<"<Net Charge>"<<endl;
	s<<" 0"<<endl;												//A voir -> Il faut rajouter dans les attribues
	s<<"</Net Charge>"<<endl;

	s<<"<Number of Electrons>"<<endl;
	s<<" "<<_number_of_alpha_electrons+_number_of_beta_electrons<<endl;
	s<<"</Number of Electrons>"<<endl;

	s<<"<Number of Alpha Electrons>"<<endl;
	s<<" "<<_number_of_alpha_electrons<<endl;
	s<<"</Number of Alpha Electrons>"<<endl;

	s<<"<Number of Beta Electrons>"<<endl;
	s<<" "<<_number_of_beta_electrons<<endl;
	s<<"</Number of Beta Electrons>"<<endl;

	s<<"<Electronic Spin Multiplicity>"<<endl;
	s<<" 1"<<endl;												//A voir -> Recommandé mais pas requis // Surement à rajouter dans les attribues
	s<<"</Electronic Spin Multiplicity>"<<endl;

	s<<"<Nuclear Names>"<<endl;
	for(int i=0; i<_number_of_atoms; i++)
		s<<" "<<_symbol[i]<<i+1<<endl;
	s<<"</Nuclear Names>"<<endl;

	s<<"<Atomic Numbers>"<<endl;
	for(int i=0; i<_number_of_atoms; i++)
		s<<" "<<_atomic_numbers[i]<<endl;
	s<<"</Atomic Numbers>"<<endl;	

	s<<"<Nuclear Charges>"<<endl;
	for(int i=0; i<_number_of_atoms; i++)
		s<<scientific<<setprecision(10)<<" "<<double(_atomic_numbers[i])<<endl;
	s<<"</Nuclear Charges>"<<endl;

	s<<"<Nuclear Cartesian Coordinates>"<<endl;
	for(int i=0; i<_number_of_atoms; i++)
	{
		for(int j=0; j<3; j++)
			s<<scientific<<setprecision(10)<<" "<<_coordinates[i][j];					//A voir -> Il faut rajouter dans les attribues
		s<<endl;
	}
	s<<"</Nuclear Cartesian Coordinates>"<<endl;

	s<<"<Number of Primitives>"<<endl;
	s<<" "<<_number_of_gtf<<endl;								//A voir -> Il faut rajouter dans les attribues
	s<<"</Number of Primitives>"<<endl;

	s<<"<Primitive Centers>"<<endl;
	for(int i=0; i<_number_of_gtf; i++)							//A voir -> Il faut rajouter dans les attribues
	{
		s<<\t<<_primitive_centers[i];							//A voir -> Il faut rajouter dans les attribues
		if(i%3==0)
			s<<endl;
	}
	s<<endl;
	s<<"</Primitive Centers>"<<endl;

	s<<"<Primitive Types>"<<endl;
	for(int i=0; i<_number_of_gtf; i++)							//A voir -> Il faut rajouter dans les attribues
	{
		s<<\t<<_primitive_types[i];							//A voir -> Il faut rajouter dans les attribues / Mal coder
		if(i%3==0)
			s<<endl;
	}
	s<<endl;
	s<<"</Primitive Types>"<<endl;

	s<<"<Primitive Exponents>"<<endl;
	for(int i=0; i<_number_of_gtf; i++)							//A voir -> Il faut rajouter dans les attribues
	{
		s<<scientific<<setprecision(10)<<\t<<_primitive_exponents[i];							//Mal coder 
		if(i%3==0)
			s<<endl;
	}
	s<<endl;
	s<<"</Primitive Exponents>"<<endl;

	int n;

	if(_alpha_and_beta)
		n=1;
	else
		n=2;

	s<<"<Molecular Orbital Occupation Numbers>"<<endl;
	for(int i=0; i<n; i++)
		for(int j=0; j<_numberOfMo; j++)
			s<<" "<<_occupation_number[i][j]<<endl;
	s<<"</Molecular Orbital Occupation Numbers>"<<endl;

	s<<"<Molecular Orbital Energies>"<<endl;
	for(int i=0; i<n; i++)
		for(int j=0; j<_numberOfMo; j++)
			s<<" "<<_orbital_energy[i][j]<<endl;
	s<<"</Molecular Orbital Energies>"<<endl;

	s<<"<Molecular Orbital Spin Types>"<<endl;
	if(n==1)
		for(int i=0; i<_numberOfMo; i++)
			s<<" "<<"Alpha and Beta"<<endl;
	else
	{
		for(size_t i=0; i<_orbital_energy[0].size(); i++)
			s<<" "<<"Alpha"<<endl;
		for(size_t i=0; i<_orbital_energy[1].size(); i++)
			s<<" "<<"Beta"<<endl;
	}
	s<<"<Molecular Orbital Spin Types>"<<endl;

	s<<"<Molecular Orbital Primitive Coefficients>"<<endl;
	int k=0;
	for(int ind=0; ind<n; ind++)
		for(int i=0; i<_numberOfMo; i++)
		{
			k++;
			s<<"<MO Number>"<<endl;
			s<<" "<<k<<endl;
			s<<"</MO Number>"<<endl;
		
			for(int j=0; j<_numberOfMo; j++)
			{
				s<<scientific<<setprecision(10)<<" "<<_coefficients[ind][i][j]
				if(j%4==0)
					s<<endl;
			}
		}
	s<<endl;
	s<<"</Molecular Orbital Primitive Coefficients>"<<endl;

	s<<"<Energy = T + Vne + Vee + Vnn>"<<endl;
	s<<" "<<_energy<<endl;													//A voir -> Il faut rajouter dans les attribues
	s<<"</Energy = T + Vne + Vee + Vnn>"

	s<<"<Virial Ratio (-V/T)>"<<endl;
	s<<" "<<_virial_ratio<<endl;											//A voir -> Il faut rajouter dans les attribues
	s<<"</Virial Ratio (-V/T)>"<<endl;

	s.close();
}

void Orbitals::Save_molden(string& tag)						//Pour moldengab il faut écrire la base non-normalisée, il faut donc copier la base dans un autre attribue avant de la normalisée !!
{
	ofstream s;
	s.open(tag);



	s.close();
}

void Orbitals::Save_gab(string& tag);
{
	ofstream s;
	s.open(tag);



	s.close();
}